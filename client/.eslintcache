[{"/Users/jaromplewe/bootcamp/projects/traveler/client/src/index.js":"1","/Users/jaromplewe/bootcamp/projects/traveler/client/src/sw/serviceWorkerRegistration.js":"2","/Users/jaromplewe/bootcamp/projects/traveler/client/src/App.js":"3","/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Login.jsx":"4","/Users/jaromplewe/bootcamp/projects/traveler/client/src/utils/GlobalContext.js":"5","/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Homepage.jsx":"6","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/LoginModal/LoginModal.jsx":"7","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/SignupModal/SignupModal.jsx":"8","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/index.js":"9","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Calendar/Calendar.jsx":"10","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripMenu/TripMenu.jsx":"11","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripModal/TripModal.jsx":"12","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/EventModal/EventModal.jsx":"13","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/Navbar.jsx":"14"},{"size":649,"mtime":1610583717823,"results":"15","hashOfConfig":"16"},{"size":5064,"mtime":1610583717825,"results":"17","hashOfConfig":"16"},{"size":753,"mtime":1610583717816,"results":"18","hashOfConfig":"16"},{"size":401,"mtime":1610583717824,"results":"19","hashOfConfig":"16"},{"size":621,"mtime":1610583717826,"results":"20","hashOfConfig":"16"},{"size":795,"mtime":1610609124152,"results":"21","hashOfConfig":"16"},{"size":3001,"mtime":1610583717819,"results":"22","hashOfConfig":"16"},{"size":8003,"mtime":1610583717821,"results":"23","hashOfConfig":"16"},{"size":35,"mtime":1610583717821,"results":"24","hashOfConfig":"16"},{"size":7645,"mtime":1610609706642,"results":"25","hashOfConfig":"16"},{"size":2596,"mtime":1610605305216,"results":"26","hashOfConfig":"16"},{"size":8560,"mtime":1610583717823,"results":"27","hashOfConfig":"16"},{"size":10454,"mtime":1610607501542,"results":"28","hashOfConfig":"16"},{"size":1112,"mtime":1610583717820,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"obqz6w",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/jaromplewe/bootcamp/projects/traveler/client/src/index.js",[],["63","64"],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/sw/serviceWorkerRegistration.js",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/App.js",["65","66"],"import React, { Component, useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport GlobalProvider from './utils/GlobalContext.js';\nimport Homepage from './pages/Homepage';\nimport Login from './pages/Login.jsx';\nimport Navbar from './components/Navbar';\nimport $ from \"jquery\";\n\nconst App = () => {\n\n  useEffect(() => {\n    $(document).foundation();\n  });\n\n  return (\n    <Router>\n      <GlobalProvider>\n        <Navbar />\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={Homepage} />\n            <Route exact path='/login' component={Login} />\n          </Switch>\n        </div>\n      </GlobalProvider>\n    </Router >\n  );\n}\n\nexport default App;\n","/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Login.jsx",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/utils/GlobalContext.js",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Homepage.jsx",["67"],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/LoginModal/LoginModal.jsx",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/SignupModal/SignupModal.jsx",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/index.js",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Calendar/Calendar.jsx",["68","69","70"],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripMenu/TripMenu.jsx",["71","72","73","74"],"import React, { Component } from 'react';\nimport { Accordion } from 'foundation-sites';\nimport './tripMenu.css'\nimport EventModal from \"../EventModal/EventModal.jsx\"\nimport TripModal from \"../TripModal/TripModal.jsx\"\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport { GlobalContext } from \"../../utils/GlobalContext.js\";\n\nclass TripMenu extends Component {\n    static contextType = GlobalContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventType: '',\n            trips: [],\n        };\n\n    }\n\n    componentDidMount() {\n        const userContext = this.context;\n\n        axios.get(`/api/traveler/trips/${userContext[0].user}`)\n            .then(res => {\n                let initialTrips = [];\n                res.data.data.forEach(trip => {\n                    initialTrips.push(trip)\n                });\n                return initialTrips\n            })\n            .then(data => {\n                this.setState({\n                    trips: data\n                }, () => {\n                    this.initializeFoundation();\n                })\n            })\n            .catch(err => {\n                console.log(\"Unable to get trips from backend: \", err);\n            });\n\n    }\n\n    initializeFoundation = () => {\n        console.log('initialized')\n        // $(document).foundation();\n\n        new Accordion($(\".accordion\"), {\n            slideSpeed: 500,\n            multiExpand: true\n        })\n    }\n\n    render() {\n        let trips = this.state.trips;\n        let createAllTripOptions = (trips.map(trip =>\n            <li id=\"accordion-item\" className=\"accordion-item\" data-accordion-item>\n                <a href=\"#\" className=\"accordion-title\">{trip.location}</a>\n                <div className=\"accordion-content\" data-tab-content>\n                    <p><a href=\"#\">Flights</a></p>\n                    <p><a href=\"#\">Lodging</a></p>\n                    <p><a href=\"#\">Activities</a></p>\n                </div>\n            </li>\n        )\n        )\n\n        return (\n            <>\n                <EventModal/>\n                <TripModal/>\n                {/* <div class=\"primary button-group\">\n                    <a class=\"trip-button button\">Add Trip</a>\n                    <a class=\"event-button button\" onClick={<EventModal/>}>Add Event</a>\n                </div> */}\n                <div className=\"callout\">\n                    <ul className=\"accordion\" data-accordion>\n                    {createAllTripOptions}\n                    </ul>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default TripMenu;","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripModal/TripModal.jsx",["75","76"],"import React, { Component } from 'react';\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\nimport 'antd/dist/antd.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { GlobalContext } from \"../../utils/GlobalContext.js\";\nimport cron from \"node-cron\";\n\nclass EventModal extends Component {\n    static contextType = GlobalContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showModal: false,\n            // eventType: \"\",\n            location: \"\",\n            departureDate: \"\",\n            departureTime: \"\",\n            // returnDate: \"\",\n            // returnTime: \"\",\n        };\n\n        this.handleOpenModal = this.handleOpenModal.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    customStyles = {\n        content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            marginRight: '-50%',\n            transform: 'translate(-50%, -50%)'\n        },\n        overlay: { zIndex: 1000 }\n    };\n\n    handleOpenModal() {\n        this.setState({ showModal: true });\n    }\n\n    handleCloseModal() {\n        this.setState({ showModal: false });\n    }\n\n    handleChange(event) {\n        console.log(event)\n        this.setState({ eventType: event.target.value });\n        console.log(this.state.eventType)\n    }\n\n    handleSubmit(event) {\n        console.log(this.state.location, this.state.departureDate, this.state.returnDate);\n        event.preventDefault();\n        var tripData = {\n            location: this.state.location,\n            startDate: this.state.departureDate,\n            endDate: this.state.returnDate,\n        };\n\n        // if (!tripData.email || !tripData.password) {\n        //     return;\n        // }\n\n        this.logTrip(tripData.location, tripData.startDate, tripData.endDate);\n        this.handleCloseModal();\n    };\n\n    logTrip = (location, startDate, endDate) => {\n        const userContext = this.context;\n        axios.post(\"/api/traveler/add-trip\", {\n            user: userContext[0].user,\n            location: location,\n            startDate: startDate,\n            endDate: endDate\n        })\n            .then((response) => {\n                console.log(\"success\");\n                // cron.schedule(\"10 * * * * *\", () => {\n                //     console.log(response)\n                //   });\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    render() {\n        return (\n            <div>\n                <button class=\"trip-button button\" onClick={this.handleOpenModal}>Add Trip</button>\n                <Modal\n                    isOpen={this.state.showModal}\n                    contentLabel=\"onRequestClose Example\"\n                    onRequestClose={this.handleCloseModal}\n                    shouldCloseOnOverlayClick={false}\n                    style={this.customStyles}\n                    ariaHideApp={false}\n                >\n                    <button onClick={this.handleCloseModal}>X</button>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Where are you going?\n                            <input onChange={e => this.setState({ location: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                        </label>\n                        <div>\n                            Departure:\n                            <DatePicker\n                                selected={this.state.departureDate}\n                                onChange={date => this.setState({ departureDate: date })}\n                                shouldCloseOnSelect=\"true\"\n                            />\n                        </div>\n                        <div>\n                            Return:\n                            <DatePicker\n                                selected={this.state.returnDate}\n                                onChange={date => this.setState({ returnDate: date })}\n                                shouldCloseOnSelect=\"true\"\n                            />\n                        </div>\n                        {this.state.eventType === \"flight\" &&\n                            <div>\n                                <label>\n                                    Flight Number:\n                                <input type=\"text\" name=\"flightNum\" />\n                                </label>\n                                <div>\n                                    Departure:\n                                    <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ departureTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n                                <div>\n                                    Return:\n                                    <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ returnTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                                <input type=\"text\" name=\"additionalInfoFlight\" />\n                                </label>\n                            </div>\n                        }\n                        {this.state.eventType === \"drive\" &&\n                            <div>\n                                <div>\n                                    Departure:\n                                    <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ departureTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n                                <div>\n                                    Return:\n                                    <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ returnTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n\n                            </div>\n                        }\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst props = {};\n\nexport default EventModal;","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/EventModal/EventModal.jsx",["77"],"import React, { Component } from 'react';\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\n// import { TimePicker } from 'antd';\n// import moment from 'moment';\n// import 'antd/dist/antd.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { GlobalContext } from \"../../utils/GlobalContext.js\";\n\nclass EventModal extends Component {\n    static contextType = GlobalContext\n\n    constructor() {\n        super();\n        this.state = {\n            showModal: false,\n            trip: [],\n            name: \"\",\n            tripId: \"\",\n            additionalInfo: \"\",\n            eventType: \"\"\n        };\n\n        this.handleOpenModal = this.handleOpenModal.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleTripChange = this.handleTripChange.bind(this);\n        this.handleEventChange = this.handleEventChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    customStyles = {\n        content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            marginRight: '-50%',\n            transform: 'translate(-50%, -50%)'\n        },\n        overlay: { zIndex: 1000 }\n    };\n\n    handleOpenModal() {\n        this.setState({ showModal: true });\n    }\n\n    handleCloseModal() {\n        this.setState({ showModal: false });\n    }\n\n    handleTripChange(event) {\n        this.setState({ tripId: event.target.value });\n    }\n\n    handleEventChange(event) {\n        this.setState({ eventType: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        var eventData = {\n            id: this.state.tripId,\n            type: this.state.eventType,\n            name: this.state.name,\n            startDate: this.state.departureDate,\n            endDate: this.state.returnDate,\n            additionalInfo: this.state.additionalInfo\n        };\n\n        this.logEvent(eventData.id, eventData.name, eventData.type, eventData.startDate, eventData.endDate, eventData.additionalInfo);\n        this.handleCloseModal();\n    };\n\n    logEvent = (id, name, type, startDate, endDate, additionalInfo) => {\n        axios.post(\"/api/traveler/add-event\", {\n            id: id,\n            type: type,\n            name: name,\n            startDate: startDate,\n            endDate: endDate,\n            additionalInfo: additionalInfo\n        })\n            .then(function () {\n                console.log(\"success\");\n            })\n            .catch(function (err) {\n                console.log(err);\n            });\n    };\n\n    componentDidMount = () => {\n        const userContext = this.context;\n\n        axios.get(`/api/traveler/trips/${userContext[0].user}`)\n            .then(res => {\n                let tripInfo = [];\n                res.data.data.forEach(trip => {\n                    tripInfo.push({\n                        id: trip._id,\n                        location: trip.location\n                    })\n                });\n                return tripInfo\n            })\n            .then(data => {\n                this.setState({\n                    trip: data\n                })\n            })\n            .catch(err => {\n                console.log(\"Unable to get trips from backend: \", err);\n            });\n    };\n\n\n    render() {\n\n        let trips = this.state.trip;\n        let createAllTripOptions = trips.map(trip =>\n            <option value={trip.id}>{trip.location}</option>\n        )\n\n        return (\n            <div>\n                <button className=\"event-button button\" onClick={this.handleOpenModal}>Add Event</button>\n                <Modal\n                    isOpen={this.state.showModal}\n                    contentLabel=\"onRequestClose Example\"\n                    onRequestClose={this.handleCloseModal}\n                    shouldCloseOnOverlayClick={false}\n                    style={this.customStyles}\n                    ariaHideApp={false}\n                >\n                    <button onClick={this.handleCloseModal}>X</button>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Trip:\n                        <select value={this.state.trip.id} onChange={this.handleTripChange}>\n                                <option value=\"\">Select trip...</option>\n                                {createAllTripOptions}\n                            </select>\n                        </label>\n                        <label>\n                            Type of Event:\n                        <select value={this.state.eventType} onChange={this.handleEventChange}>\n                                <option value=\"\">Select event type...</option>\n                                <option value=\"flight\">Flight</option>\n                                <option value=\"lodging\">Lodging</option>\n                                <option value=\"activity\">Activity</option>\n                            </select>\n                        </label>\n                        {this.state.eventType === \"flight\" &&\n                            <div>\n                                <label>\n                                    Flight number:\n                            <input onChange={e => this.setState({ name: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                                </label>\n                                <div>\n                                    Departure:\n                            <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <div>\n                                    Return:\n                            <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                                <input\n                                        type=\"text\"\n                                        name=\"additionalInfoFlight\"\n                                        onChange={info => this.setState({ additionalInfo: info.target.value })}\n                                    />\n                                </label>\n                            </div>\n                        }\n                        {this.state.eventType === \"lodging\" &&\n                            <div>\n                                <label>\n                                    Lodging name:\n                            <input onChange={e => this.setState({ name: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                                </label>\n                                <div>\n                                    Check-in:\n                            <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <div>\n                                    Check-out:\n                            <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                                    <input\n                                        type=\"text\"\n                                        name=\"additionalInfoLodge\"\n                                        onChange={info => this.setState({ additionalInfo: info.target.value })}\n                                    />\n                                </label>\n                            </div>\n                        }\n                        {this.state.eventType === \"activity\" &&\n                            <div>\n                                <label>\n                                    Activity name:\n                            <input onChange={e => this.setState({ name: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                                </label>\n                                <div>\n                                    Start:\n                            <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <div>\n                                    End:\n                            <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                                    <input\n                                        type=\"text\"\n                                        name=\"additionalInfoActivity\"\n                                        onChange={info => this.setState({ additionalInfo: info.target.value })}\n                                    />\n                                </label>\n                            </div>\n                        }\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst props = {};\n\nexport default EventModal;","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/Navbar.jsx",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"86","line":1,"column":39,"nodeType":"84","messageId":"85","endLine":1,"endColumn":47},{"ruleId":"82","severity":1,"message":"87","line":6,"column":8,"nodeType":"84","messageId":"85","endLine":6,"endColumn":13},{"ruleId":"82","severity":1,"message":"88","line":162,"column":13,"nodeType":"84","messageId":"85","endLine":162,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":166,"column":37,"nodeType":"91","messageId":"92","endLine":166,"endColumn":39},{"ruleId":"89","severity":1,"message":"90","line":180,"column":37,"nodeType":"91","messageId":"92","endLine":180,"endColumn":39},{"ruleId":"93","severity":1,"message":"94","line":60,"column":17,"nodeType":"95","endLine":60,"endColumn":57},{"ruleId":"93","severity":1,"message":"94","line":62,"column":24,"nodeType":"95","endLine":62,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":63,"column":24,"nodeType":"95","endLine":63,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":64,"column":24,"nodeType":"95","endLine":64,"endColumn":36},{"ruleId":"82","severity":1,"message":"96","line":10,"column":8,"nodeType":"84","messageId":"85","endLine":10,"endColumn":12},{"ruleId":"82","severity":1,"message":"97","line":210,"column":7,"nodeType":"84","messageId":"85","endLine":210,"endColumn":12},{"ruleId":"82","severity":1,"message":"97","line":257,"column":7,"nodeType":"84","messageId":"85","endLine":257,"endColumn":12},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Login' is defined but never used.","'allDay' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'cron' is defined but never used.","'props' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]