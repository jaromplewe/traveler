[{"/Users/jaromplewe/bootcamp/projects/traveler/client/src/index.js":"1","/Users/jaromplewe/bootcamp/projects/traveler/client/src/App.js":"2","/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Login.jsx":"3","/Users/jaromplewe/bootcamp/projects/traveler/client/src/utils/GlobalContext.js":"4","/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Homepage.jsx":"5","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/SignupModal/SignupModal.jsx":"6","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/LoginModal/LoginModal.jsx":"7","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/index.js":"8","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Calendar/Calendar.jsx":"9","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripMenu/TripMenu.jsx":"10","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/EventModal/EventModal.jsx":"11","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripModal/TripModal.jsx":"12","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/Navbar.jsx":"13"},{"size":327,"mtime":1610222901223,"results":"14","hashOfConfig":"15"},{"size":1237,"mtime":1610218908097,"results":"16","hashOfConfig":"15"},{"size":397,"mtime":1609603884199,"results":"17","hashOfConfig":"15"},{"size":1166,"mtime":1609900251826,"results":"18","hashOfConfig":"15"},{"size":728,"mtime":1610216896265,"results":"19","hashOfConfig":"15"},{"size":7991,"mtime":1609900251820,"results":"20","hashOfConfig":"15"},{"size":2888,"mtime":1609904317940,"results":"21","hashOfConfig":"15"},{"size":35,"mtime":1607657352000,"results":"22","hashOfConfig":"15"},{"size":6490,"mtime":1610074644250,"results":"23","hashOfConfig":"15"},{"size":3393,"mtime":1610223792031,"results":"24","hashOfConfig":"15"},{"size":9914,"mtime":1610215188397,"results":"25","hashOfConfig":"15"},{"size":8374,"mtime":1609905847460,"results":"26","hashOfConfig":"15"},{"size":815,"mtime":1609900251819,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"obqz6w",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},"/Users/jaromplewe/bootcamp/projects/traveler/client/src/index.js",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/App.js",[],["59","60"],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Login.jsx",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/utils/GlobalContext.js",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/pages/Homepage.jsx",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/SignupModal/SignupModal.jsx",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/LoginModal/LoginModal.jsx",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/index.js",[],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Calendar/Calendar.jsx",["61","62","63"],"import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport axios from \"axios\";\nimport EventModal from \"../EventModal/EventModal.jsx\"\nimport TripModal from \"../TripModal/TripModal.jsx\"\n\n// import \"./App.css\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\nconst propTypes = {}\n\nclass TravelCalendar extends Component {\n    state = {\n        events: [],\n        displayDragItemInCell: true\n    };\n\n    componentDidMount = () => {\n        \n        axios.get(`/api/traveler/trips/${localStorage.getItem(\"user\")}`)\n            .then((res) => {\n                // console.log(\"USER: \", localStorage.getItem(\"user\"))\n                const tripArr = res.data.data;\n\n                tripArr.forEach(trip => {\n                    // console.log(trip)\n                    const startDateYear = trip.startDate.slice(0, 4);\n                    const startDateMonth = trip.startDate.slice(5, 7);\n                    const startDateDay = trip.startDate.slice(8, 10);\n                    const startDateHour = trip.startDate.slice(11, 13);\n                    const startDateMinute = trip.startDate.slice(14, 16);\n                    \n                    const endDateYear = trip.endDate.slice(0, 4);\n                    const endDateMonth = trip.endDate.slice(5, 7);\n                    const endDateDay = trip.endDate.slice(8, 10);\n                    const endDateHour = trip.endDate.slice(11, 13);\n                    const endDateMinute = trip.endDate.slice(14, 16);\n\n                    this.setState({\n                        events: [\n                            ...this.state.events,\n                            {\n                                type: \"trip\",\n                                title: trip.location,\n                                start: new Date(startDateYear, startDateMonth, startDateDay, startDateHour, startDateMinute),\n                                end: new Date(endDateYear, endDateMonth, endDateDay, endDateHour, endDateMinute)\n                            }\n                        ]\n                    })\n                    // console.log(\"state.events: \", this.state.events)\n                })\n            })\n            .catch(function (err) {\n                console.log(err);\n            });\n\n        \n    }\n\n    handleSelect = ({ start, end }) => {\n        const title = window.prompt('New Event name')\n        if (title)\n            this.setState({\n                events: [\n                    ...this.state.events,\n                    {\n                        start,\n                        end,\n                        title,\n                    },\n                ],\n            })\n    }\n\n    onEventResize = (data) => {\n        const { start, end } = data;\n\n        this.setState((state) => {\n            state.events[0].start = start;\n            state.events[0].end = end;\n            return { events: [...state.events] };\n        });\n    };\n\n    onEventDrop = (data) => {\n        console.log(data);\n    };\n\n\n\n    // Drag and Drop Code:\n    handleDragStart = event => {\n        this.setState({ draggedEvent: event })\n    }\n\n    dragFromOutsideItem = () => {\n        return this.state.draggedEvent\n    }\n\n    onDropFromOutside = ({ start, end, allDay }) => {\n        const { draggedEvent } = this.state\n\n        const event = {\n            id: draggedEvent.id,\n            title: draggedEvent.title,\n            start,\n            end,\n            allDay: allDay,\n        }\n\n        this.setState({ draggedEvent: null })\n        this.moveEvent({ event, start, end })\n    }\n\n    moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\n        const { events } = this.state\n\n        let allDay = event.allDay\n\n        if (!event.allDay && droppedOnAllDaySlot) {\n            allDay = true\n        } else if (event.allDay && !droppedOnAllDaySlot) {\n            allDay = false\n        }\n\n        const nextEvents = events.map(existingEvent => {\n            return existingEvent.id == event.id\n                ? { ...existingEvent, start, end }\n                : existingEvent\n        })\n\n        this.setState({\n            events: nextEvents,\n        })\n    }\n\n    resizeEvent = ({ event, start, end }) => {\n        const { events } = this.state\n\n        const nextEvents = events.map(existingEvent => {\n            return existingEvent.id == event.id\n                ? { ...existingEvent, start, end }\n                : existingEvent\n        })\n\n        this.setState({\n            events: nextEvents,\n        })\n    }\n\n    handleEventEditModal = (event) => {\n        console.log(\"hit event: \", event)\n        return (\n            <EventModal />,\n            <TripModal />\n        )\n    }\n\n    eventStyleGetter = (event, start, end, isSelected) => {\n        var style = {\n            backgroundColor: \"orange\",\n            borderRadius: '10px',\n            opacity: 0.8,\n            color: 'black',\n            border: '0px',\n            display: 'block'\n        };\n        return {\n            style: style\n        };\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <DnDCalendar\n                    data-toggle=\"eventModal\"\n                    selectable\n                    defaultDate={moment().toDate()}\n                    defaultView=\"month\"\n                    events={this.state.events}\n                    localizer={localizer}\n                    scrollToTime={new Date(1970, 1, 1, 6)}\n                    onEventDrop={this.moveEvent}\n                    onEventResize={this.resizeEvent}\n                    dragFromOutsideItem={\n                        this.state.displayDragItemInCell ? this.dragFromOutsideItem : null\n                    }\n                    onDropFromOutside={this.onDropFromOutside}\n                    handleDragStart={this.handleDragStart}\n                    resizable\n                    onSelectSlot={this.handleSelect}\n                    style={{ height: \"75vh\" }}\n                    popup\n                    eventPropGetter={this.eventStyleGetter}\n                    // dayPropGetter={this.eventStyleGetter}\n                />\n            </div>\n        );\n    }\n}\n\nTravelCalendar.propTypes = propTypes\n\nexport default TravelCalendar;","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripMenu/TripMenu.jsx",["64","65","66","67"],"/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/EventModal/EventModal.jsx",["68"],"import React, { Component } from 'react';\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\n// import { TimePicker } from 'antd';\n// import moment from 'moment';\nimport 'antd/dist/antd.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass EventModal extends Component {\n    constructor() {\n        super();\n        this.state = {\n            showModal: false,\n            eventType: \"\",\n            tripLocation: [],\n        };\n\n        this.handleOpenModal = this.handleOpenModal.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    customStyles = {\n        content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            marginRight: '-50%',\n            transform: 'translate(-50%, -50%)'\n        },\n        overlay: { zIndex: 1000 }\n    };\n\n    handleOpenModal() {\n        this.setState({ showModal: true });\n    }\n\n    handleCloseModal() {\n        this.setState({ showModal: false });\n    }\n\n    handleChange(event) {\n        console.log(event)\n        this.setState({ eventType: event.target.value });\n        console.log(this.state.eventType)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        var eventData = {\n            type: this.state.eventType,\n            location: this.state.location,\n            startDate: this.state.departureDate,\n            endDate: this.state.returnDate,\n        };\n\n        this.logEvent(eventData.type, eventData.location, eventData.startDate, eventData.endDate);\n        this.handleCloseModal();\n    };\n\n    logEvent = (type, location, startDate, endDate) => {\n        axios.post(\"/api/traveler/add-event\", {\n            type: type,\n            name: type,\n            startDate: startDate,\n            endDate: endDate\n        })\n            .then(function () {\n                console.log(\"success\");\n            })\n            .catch(function (err) {\n                console.log(err);\n            });\n    };\n\n    componentDidMount = () => {\n        axios.get(`/api/traveler/trips/${localStorage.getItem(\"user\")}`)\n            .then(res => {\n                let tripLocations = [];\n                res.data.data.forEach(trip => {\n                    tripLocations.push(trip.location)\n                });\n                return tripLocations\n            })\n            .then(data => {\n                this.setState({\n                    tripLocation: data\n                })\n            })\n            .catch(err => {\n                console.log(\"Unable to get trips from backend: \", err);\n            });\n    };\n\n\n    render() {\n        let trips = this.state.tripLocation;\n        let createAllTripOptions = trips.map(trip => \n            <option value={trip}>{trip}</option>\n        )\n\n        return (\n            <div>\n                <button class=\"event-button button\" onClick={this.handleOpenModal}>Add Event</button>\n                <Modal\n                    isOpen={this.state.showModal}\n                    contentLabel=\"onRequestClose Example\"\n                    onRequestClose={this.handleCloseModal}\n                    shouldCloseOnOverlayClick={false}\n                    style={this.customStyles}\n                    ariaHideApp={false}\n                >\n                    <button onClick={this.handleCloseModal}>X</button>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Trip:\n                        <select value={this.state.eventType} onChange={this.handleChange}>\n                                {createAllTripOptions}\n                            </select>\n                        </label>\n                        <label>\n                            Type of Event:\n                        <select value={this.state.eventType} onChange={this.handleChange}>\n                                <option value=\"\">Select event type...</option>\n                                <option value=\"flight\">Flight</option>\n                                <option value=\"lodging\">Lodging</option>\n                                <option value=\"activity\">Activity</option> \n                            </select>\n                        </label>\n                        {this.state.eventType === \"flight\" &&\n                            <div>\n                                <label>\n                                    Flight Number:\n                                <input type=\"text\" name=\"flightNum\" />\n                                </label>\n                                <label>\n                                    Where are you going?\n                            <input onChange={e => this.setState({ location: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                                </label>\n                                <div>\n                                    Departure:\n                            <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <div>\n                                    Return:\n                            <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                                <input type=\"text\" name=\"additionalInfoFlight\" />\n                                </label>\n                            </div>\n                        }\n                        {this.state.eventType === \"lodging\" &&\n                            <div>\n                                <label>\n                                    Lodging Name:\n                            <input type=\"text\" name=\"lodgingName\" />\n                                </label>\n                                <label>\n                                    Where are you going?\n                            <input onChange={e => this.setState({ location: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                                </label>\n                                <div>\n                                    Check-in:\n                            <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <div>\n                                    Check-out:\n                            <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                            <input type=\"text\" name=\"additionalInfoLodge\" />\n                                </label>\n                            </div>\n                        }\n                        {this.state.eventType === \"activity\" &&\n                            <div>\n                                <label>\n                                    Activity Name:\n                            <input type=\"text\" name=\"activityName\" />\n                                </label>\n                                <label>\n                                    Date:\n                            <input type=\"text\" name=\"activityDate\" />\n                                </label>\n                                <label>\n                                    Where are you going?\n                            <input onChange={e => this.setState({ location: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                                </label>\n                                <div>\n                                    Start:\n                            <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <div>\n                                    End:\n                            <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                            <input type=\"text\" name=\"additionalInfoActivity\" />\n                                </label>\n                            </div>\n                        }\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst props = {};\n\nexport default EventModal;","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/TripModal/TripModal.jsx",["69"],"import React, { Component } from 'react';\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\nimport 'antd/dist/antd.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass EventModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showModal: false,\n            // eventType: \"\",\n            location: \"\",\n            departureDate: \"\",\n            departureTime: \"\",\n            // returnDate: \"\",\n            // returnTime: \"\",\n        };\n\n        this.handleOpenModal = this.handleOpenModal.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    customStyles = {\n        content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            marginRight: '-50%',\n            transform: 'translate(-50%, -50%)'\n        },\n        overlay: { zIndex: 1000 }\n    };\n\n    handleOpenModal() {\n        this.setState({ showModal: true });\n    }\n\n    handleCloseModal() {\n        this.setState({ showModal: false });\n    }\n\n    handleChange(event) {\n        console.log(event)\n        this.setState({ eventType: event.target.value });\n        console.log(this.state.eventType)\n    }\n\n    handleSubmit(event) {\n        console.log(this.state.location, this.state.departureDate, this.state.returnDate);\n        event.preventDefault();\n        var tripData = {\n            location: this.state.location,\n            startDate: this.state.departureDate,\n            endDate: this.state.returnDate,\n        };\n\n        // if (!tripData.email || !tripData.password) {\n        //     return;\n        // }\n\n        this.logTrip(tripData.location, tripData.startDate, tripData.endDate);\n        this.handleCloseModal();\n    };\n\n    logTrip = (location, startDate, endDate) => {\n        axios.post(\"/api/traveler/add-trip\", {\n            user: localStorage.getItem(\"user\"),\n            location: location,\n            startDate: startDate,\n            endDate: endDate\n        })\n            .then(function () {\n                console.log(\"success\");\n                // window.location.replace(\"/\");\n                // If there's an error, log the error\n            })\n            .catch(function (err) {\n                console.log(err);\n            });\n    };\n\n    render() {\n        return (\n            <div>\n                <button class=\"trip-button button\" onClick={this.handleOpenModal}>Add Trip</button>\n                <Modal\n                    isOpen={this.state.showModal}\n                    contentLabel=\"onRequestClose Example\"\n                    onRequestClose={this.handleCloseModal}\n                    shouldCloseOnOverlayClick={false}\n                    style={this.customStyles}\n                    ariaHideApp={false}\n                >\n                    <button onClick={this.handleCloseModal}>X</button>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Where are you going?\n                            <input onChange={e => this.setState({ location: e.target.value })} type=\"text\" name=\"tripLocation\" />\n                        </label>\n                        <div>\n                            Departure:\n                            <DatePicker\n                                selected={this.state.departureDate}\n                                onChange={date => this.setState({ departureDate: date })}\n                                shouldCloseOnSelect=\"true\"\n                            />\n                        </div>\n                        <div>\n                            Return:\n                            <DatePicker\n                                selected={this.state.returnDate}\n                                onChange={date => this.setState({ returnDate: date })}\n                                shouldCloseOnSelect=\"true\"\n                            />\n                        </div>\n                        {this.state.eventType === \"flight\" &&\n                            <div>\n                                <label>\n                                    Flight Number:\n                                <input type=\"text\" name=\"flightNum\" />\n                                </label>\n                                <div>\n                                    Departure:\n                                    <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ departureTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n                                <div>\n                                    Return:\n                                    <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ returnTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n                                <label>\n                                    Additional Info:\n                                <input type=\"text\" name=\"additionalInfoFlight\" />\n                                </label>\n                            </div>\n                        }\n                        {this.state.eventType === \"drive\" &&\n                            <div>\n                                <div>\n                                    Departure:\n                                    <DatePicker\n                                        selected={this.state.departureDate}\n                                        onChange={date => this.setState({ departureDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ departureTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n                                <div>\n                                    Return:\n                                    <DatePicker\n                                        selected={this.state.returnDate}\n                                        onChange={date => this.setState({ returnDate: date })}\n                                        shouldCloseOnSelect=\"true\"\n                                    />\n                                    <TimePicker\n                                        use12Hours\n                                        defaultValue={moment('12:08', 'HH:mm')}\n                                        onChange={time => this.setState({ returnTime: time })}\n                                        format=\"h:mm a\"\n                                    />\n                                </div>\n\n                            </div>\n                        }\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst props = {};\n\nexport default EventModal;","/Users/jaromplewe/bootcamp/projects/traveler/client/src/components/Navbar/Navbar.jsx",["70"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useGlobalContext } from \"../../utils/GlobalContext.js\";\nimport './Navbar.css';\n\nconst Navbar = () => {\n\n  const [state, dispatch] = useGlobalContext();\n\n  const logout = () => {\n    dispatch({ type: \"logout\" })\n  }\n\n  return (\n    <nav className=\"Navbar\">\n      <div className=\"Navbar-brand\">\n        <span>Traveler</span>\n      </div>\n\n      <ul className=\"Navbar-links\">\n        <li className=\"Navbar-link\">\n          <Link to=\"/\">\n            Homepage\n          </Link>\n        </li>\n\n        <ul className=\"Navbar-Links dropdown menu\" data-dropdown-menu>\n          <li>\n            <button className=\"Navbar-links\" onClick={logout}>Logout</button>\n          </li>\n        </ul>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":128,"column":13,"nodeType":"77","messageId":"78","endLine":128,"endColumn":19},{"ruleId":"79","severity":1,"message":"80","line":132,"column":37,"nodeType":"81","messageId":"82","endLine":132,"endColumn":39},{"ruleId":"79","severity":1,"message":"80","line":146,"column":37,"nodeType":"81","messageId":"82","endLine":146,"endColumn":39},{"ruleId":"83","severity":1,"message":"84","line":58,"column":17,"nodeType":"85","endLine":58,"endColumn":53},{"ruleId":"83","severity":1,"message":"84","line":60,"column":24,"nodeType":"85","endLine":60,"endColumn":36},{"ruleId":"83","severity":1,"message":"84","line":61,"column":24,"nodeType":"85","endLine":61,"endColumn":36},{"ruleId":"83","severity":1,"message":"84","line":62,"column":24,"nodeType":"85","endLine":62,"endColumn":36},{"ruleId":"75","severity":1,"message":"86","line":241,"column":7,"nodeType":"77","messageId":"78","endLine":241,"endColumn":12},{"ruleId":"75","severity":1,"message":"86","line":204,"column":7,"nodeType":"77","messageId":"78","endLine":204,"endColumn":12},{"ruleId":"75","severity":1,"message":"87","line":8,"column":10,"nodeType":"77","messageId":"78","endLine":8,"endColumn":15},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'allDay' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'props' is assigned a value but never used.","'state' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]